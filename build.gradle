plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
}

group = 'com.github.manerajona'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.4.5'
    implementation 'org.codehaus.groovy:groovy-all:3.0.10'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // mandatory dependencies for using Spock with spring
    implementation 'org.codehaus.groovy:groovy:3.0.10'
    testImplementation platform('org.spockframework:spock-bom:2.1-groovy-3.0')
    testImplementation 'org.spockframework:spock-spring:2.2-M1-groovy-3.0'
    testImplementation 'org.spockframework:spock-core'

    // optional dependencies for using Spock
    testImplementation "org.hamcrest:hamcrest-core:2.2"             // only necessary if Hamcrest matchers are used
    testImplementation 'io.projectreactor:reactor-test'             // only necessary if Reactor features are used
    testRuntimeOnly 'net.bytebuddy:byte-buddy:1.12.8'               // allows mocking of classes (in addition to interfaces)
    testRuntimeOnly "org.objenesis:objenesis:3.2"                   // allows mocking of classes without default constructor (together with ByteBuddy or CGLIB)
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'     // allows mocking external rest calls
    testImplementation 'org.jeasy:easy-random-core:5.0.0'           // allows mocking create random values and objects
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
